schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION) {
  query: Query
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(
  graph: join__Graph
  requires: join__FieldSet
  provides: join__FieldSet
  type: String
  external: Boolean
  override: String
  usedOverridden: Boolean
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(
  graph: join__Graph!
  interface: String!
) repeatable on OBJECT | INTERFACE

directive @join__type(
  graph: join__Graph!
  key: join__FieldSet
  extension: Boolean! = false
  resolvable: Boolean! = true
  isInterfaceObject: Boolean! = false
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(
  url: String
  as: String
  for: link__Purpose
  import: [link__Import]
) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
  REVIEWS @join__graph(name: "reviews", url: "")
  USERS @join__graph(name: "users", url: "")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Profile @join__type(graph: REVIEWS) @join__type(graph: USERS) {
  id: ID! @join__field(graph: REVIEWS, external: true) @join__field(graph: USERS)
  name: String! @join__field(graph: USERS)
}

type Query @join__type(graph: REVIEWS) @join__type(graph: USERS) {
  reviews: [Review] @join__field(graph: REVIEWS)
  users: [User] @join__field(graph: USERS)
}

type Review @join__type(graph: REVIEWS, key: "id") {
  id: ID!
  title: String!
  author: User!
}

type User
  @join__type(graph: REVIEWS, key: "id", extension: true)
  @join__type(graph: USERS, key: "id") {
  id: ID!
  profile: Profile! @join__field(graph: REVIEWS, external: true) @join__field(graph: USERS)
  reviews: [Review] @join__field(graph: REVIEWS, requires: "profile { id __typename }")
}
